spring:
  application:
    name: api-gateway-service
    description: microservicio de Gateway desde Github
  config:
    import: "optional:configserver:"
  cloud:
    config:
      discovery:
        enable: true
        serviceId: config-server
    gateway:
      default-filters:
        - TokenRelay=
      routes:
        - id: SpringBookKeycloak # nombre q le ponemos al filtro
          uri: lb://SpringBookKeycloak  # redireccion al servicio
          predicates: # que debe identificarse en la ruta q recibimos, para identificar q debe activarse esta ruta
            - Path=/keycloak/**
        - id: Accounts
          uri: http://localhost:8086/account/
          predicates:
            - Path=/account/**
        - id: Payments
          uri: lb://payment-service
          predicates:
            - Path=/payment/**
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/spring-boot-ream-dev
          jwk-set-uri: http://localhost:8080/realms/spring-boot-ream-dev/protocol/openid-connect/certs
      client:
        provider:
          api-gateway:
            issuer-uri: http://localhost:8080/realms/spring-boot-ream-dev
        api-gateway:
          provider: api-gateway  # quien es el provider de oauth2.0 y openid
          scope: openid
          client-id: api-gateway-client
          client-secret: hQenC95S3SwPi3V3pW5pBAIAoL284HDc
          authorization-grant-type: authorization_code
          redirect-uri: http://localhost:9090/login/oauth2/code/keycloak
#      default-filters:
#        - TokenRelay=
#      globalcors:
#        corsConfigurations:
#          '[/**]':
#            allowedOrigins: "http://localhost:3000"
#            allowedMethods:
#              - GET
#              - POST
#              - PUT
#              - PATCH
#              - DELETE
#              - OPTIONS
#            allowedHeaders:
#              - Origin
#              - X-Requested-With
#              - Content-Type
#              - Accept
#              - Authorization
#            allowCredentials: true
#            maxAge: 3600


#jwt:
#  auth:
#    converter:
#      resource-id: spring-boot-ream-dev
#      principle-attribute: preferred_username

server:
  port: 8085

logging:
  level:
    org:
      springframework:
        security: DEBUG
        web: DEBUG
      keycloak: DEBUG

# Eureka Configuration (Without Docker)
eureka:
  instance:
    hostname: localhost
    statusPageUrlPath: http://localhost:${server.port}/actuator/info
    healthCheckUrlPath: http://localhost:${server.port}/actuator/health
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
management:
  endpoints:
    web:
      exposure:
        include: health, info
  info:
    env:
      enabled: true
info:
  app:
    name: Gateway
    description: API gateway
    version: 1.0.0
